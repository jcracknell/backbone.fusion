// Generated by CoffeeScript 1.3.3
(function() {
  var Binder, CatModel, binder, element, model, node, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  Binder = this.Backbone.Fusion.Binder;

  binder = null;

  element = null;

  node = null;

  model = null;

  CatModel = this.Backbone.Model.extend({
    defaults: {
      declawed: false,
      name: '',
      age: 0,
      color: '',
      notes: '',
      features: ['striped']
    }
  });

  describe('Backbone.Fusion.Binder', function() {
    beforeEach(function() {
      binder = new Binder();
      model = new CatModel();
    });
    describe('form element binding', function() {
      describe('<input type="checkbox" />', function() {
        beforeEach(function() {
          element = document.createElement('input');
          element.setAttribute('type', 'checkbox');
        });
        describe('with no value specified (boolean-valued)', function() {
          beforeEach(function() {
            element.setAttribute('data-binding', 'declawed');
            binder.bind(model, element);
          });
          it('should update the form element when the model changes', function() {
            expect(element.checked).toEqual(false);
            model.set({
              declawed: true
            });
            expect(element.checked).toEqual(true);
          });
          it('should update the model when the form element changes', function() {
            expect(model.get('declawed')).toEqual(false);
            element.checked = true;
            $(element).change();
            expect(model.get('declawed')).toEqual(true);
          });
        });
        describe('with value specified (array-valued)', function() {
          beforeEach(function() {
            element.setAttribute('data-binding', 'features');
            element.setAttribute('value', 'striped');
            binder.bind(model, element);
          });
          it('should update the form element when the model changes', function() {
            expect(element.checked).toEqual(true);
            model.set({
              features: []
            });
            expect(element.checked).toEqual(false);
          });
          it('should update the model when the form element changes', function() {
            expect(element.checked).toEqual(true);
            element.checked = false;
            $(element).change();
            expect(model.get('features').length).toEqual(0);
          });
        });
      });
      describe('<input type="hidden"/>', function() {
        beforeEach(function() {
          element = document.createElement('input');
          element.setAttribute('type', 'hidden');
          element.setAttribute('data-binding', 'color');
          binder.bind(model, element);
        });
        it('should update the form element when the model changes', function() {
          model.set({
            color: 'orange'
          });
          expect(element.value).toEqual('orange');
        });
        it('should update the model when the form element changes', function() {
          element.value = 'orange';
          $(element).change();
          expect(model.get('color')).toEqual('orange');
        });
      });
      describe('<input type="text"/>', function() {
        beforeEach(function() {
          element = document.createElement('input');
          element.setAttribute('type', 'text');
        });
        it('should update the form element when the model changes', function() {
          element.setAttribute('data-binding', 'name');
          binder.bind(model, element);
          model.set({
            name: 'Garfield'
          });
          expect(element.value).toEqual('Garfield');
        });
        it('should update the model when the form element changes', function() {
          element.setAttribute('data-binding', 'name');
          binder.bind(model, element);
          element.value = 'Nermal';
          $(element).change();
          expect(model.get('name')).toEqual('Nermal');
        });
        it('should update the model on specified events', function() {
          element.setAttribute('data-binding', "attribute: 'name', events: [ 'keypress' ]");
          binder.bind(model, element);
          element.value = 'Nermal';
          $(element).keypress();
          expect(model.get('name')).toEqual('Nermal');
        });
        it('should not update the model on unspecified events', function() {
          element.setAttribute('data-binding', "attribute: 'name', events: [ 'keypress' ]");
          binder.bind(model, element);
          element.value = 'Nermal';
          $(element).change();
          expect(model.get('name')).toEqual('');
        });
      });
      describe('<input type="password"/>', function() {
        beforeEach(function() {
          element = document.createElement('input');
          element.setAttribute('type', 'password');
          element.setAttribute('data-binding', 'age');
          binder.bind(model, element);
        });
        it('should update the form element when the model changes', function() {
          model.set({
            age: 12
          });
          expect(element.value).toEqual('12');
        });
        it('should update the model when the form element changes', function() {
          element.value = '12';
          $(element).change();
          expect(model.get('age')).toEqual('12');
        });
      });
      describe('<textarea/>', function() {
        beforeEach(function() {
          element = document.createElement('textarea');
          element.setAttribute('data-binding', 'notes');
          binder.bind(model, element);
        });
        it('should update the form element when the model changes', function() {
          model.set({
            notes: 'has no name'
          });
          expect(element.value).toEqual('has no name');
        });
        it('should update the model when the form element changes', function() {
          element.value = 'tends to shed';
          $(element).change();
          expect(model.get('notes')).toEqual('tends to shed');
        });
      });
    });
    describe('template binding', function() {
      describe('text node', function() {
        beforeEach(function() {
          element = document.createElement('div');
          element.appendChild(node = document.createTextNode('foo {{name}}'));
          binder.bind(model, element);
        });
        it('should update when the model is updated', function() {
          expect(node.nodeValue).toEqual('foo ');
          model.set({
            name: 'bar'
          });
          expect(node.nodeValue).toEqual('foo bar');
        });
      });
      describe('attribute node', function() {
        beforeEach(function() {
          element = document.createElement('div');
          element.setAttribute('title', 'Details for {{name}}');
          binder.bind(model, element);
        });
        it('should update when the model is updated', function() {
          expect(element.getAttribute('title')).toEqual('Details for ');
          model.set({
            name: 'James'
          });
          expect(element.getAttribute('title')).toEqual('Details for James');
        });
      });
    });
  });
}).call(this);
